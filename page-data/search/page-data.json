{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"데브코스에 시작 전.. 사실 데브코스에 들어오기 전,그러니까 합격 메일을 받기 전까지는 해당 과정에 붙을 꺼라고\n감히 상상조차 하지 못했다.\n면접 마지막 떄 '떨어져도 여러분들이 부족한게 아니에요.' 라는 말을 들은 것도 한 몫 했고,\n또 이전에 겪었던 면접 실패에 대한 경험들이 자기방어적으로 작동해서 나도 모르게 기대치를 낮춘 것 같기도 하다.(울지마.…","fields":{"slug":"/1주차/"},"frontmatter":{"date":"October 22, 2022","title":"1주차를 마치고","tags":["회고","devCourse"]},"rawMarkdownBody":"\n## 데브코스에 시작 전..\n\n사실 데브코스에 들어오기 전,그러니까 합격 메일을 받기 전까지는 해당 과정에 붙을 꺼라고\n감히 상상조차 하지 못했다.\n면접 마지막 떄 '떨어져도 여러분들이 부족한게 아니에요.' 라는 말을 들은 것도 한 몫 했고,\n또 이전에 겪었던 면접 실패에 대한 경험들이 자기방어적으로 작동해서 나도 모르게 기대치를 낮춘 것 같기도 하다.(울지마..바보야! 난 정말..ㄱㅊㄴ..)\n\n아무튼..\n그렇게 합격메일을 받고 한 삼일정도는 생각날 때마다 합격 결과를 본 것같다..\n사실 누가보면 좋은 곳에 취업한 것도 아닌데 그게 그렇게 좋은가?라고 할 수도 있다.\n하지만 당시의 나는 계속된 취업 실패로 좌절감을 느꼈고,또 기존에 세웠던 계획들에 대한 의구심을 느낄 때 쯤이었다.그 때 마침 데브코스의 합격 메일이 온 것이다.암울했던 상황도 상황이었지만,기대하지 않았던 결과였기에 더욱더 기뻤던 것 같다.\n어쩌면 내게 주어지는 몇 안되는 기회다 싶은 생각이 들기도 하였다.\n\n데브코스가 시작하기 전까지 한 열흘정도의 기간이 남아 있었다.\n해당 기간동안 많이 늘어지고 게으르게 보냈는데 그게 많이 후회된다..ㅜㅜ\n'빡세게 시작하기 전에 우선 리프레쉬 하자' 라는 자기합리화도 있었고,\n또 들뜬마음에 마치 취업이 확정된 것 마냥 굴었던 것 같기도 하다.. 하하;;\n\n## 데브코스 에서의 첫 주를 마치고..\n\n그렇게 시간이 흘러 오리엔테이션 날이 되었다.\n나는 설레이는 마음에 동기들을 확인하랴, 설명을 들으랴 매우 바빴다.ㅋㅋ\n자격지심이었는지 모두들 개발 고수처럼 느껴졌고,시작하기 전 게으르게 보냈던 시간들이 스쳐지나가며\n나 자신을 자책하기도 했다.ㅜㅜ(허허 이 기특한녀석.. 시간을 그리 보내다니.. )\n그렇게 OT를 마무리하고 즐거운 주말을 보낸 뒤 데브 코스가 시작되었다.\n\n첫 1,2주는 자바 관련한 강의들이었다.\n사실 아는 내용과 모르는 내용들이 더러 섞여 있었지만,자바에 대해 좀 더 깊이있게 알게 되었던 것만은 확실했다.또 코스 전반적으로 하루 학습한 것을 기록으로 남기는 TIL을 권장하고 있었다.\n머리속 내용을 설명하려고 글로 적다보니 강의내용보다 좀 더 찾아보게 되었고,\n배운 내용을 확실히 내 것으로 만드는 느낌이 들어서 시작하길 잘했다고 생각했다.\nTIL을 작성하는 곳을 gastby를 통해 github.io로 만들었는데 여기서 애좀 먹었다..\n(바보같은 나의모습..스읍..하..)\n\n또 게더에 모여서 다같이 이야기도 하고,오늘 할 일들을 팀원들과 스크럼 하면서 이야기도 하니 혼자 할 때보다 의지도 더 생기고 힘도 나는 것 같았다.\n\n아,실시간 세션도 진행하였는데 유튜브에서만 보던 유명한 분들이 오셔서 설명해주니 콘서트에 온 것 같았다.ㅋㅋ 아는 체하고 싶었지만 그 분들은 나를 처음 보는 것이었기에 흔들려더 손을 반대쪽 손으로 낚아채는데 애좀 먹었다;;ㅋ\n\n그 밖에 중간중간 멘토님들의 팀면담,그리고 개별 면담을 진행하며 고민상담도 해주셨다.\n엄~청 친절하셔서 놀랐고,다들 왜이렇게 말을 잘하시는지 신기했다.ㅋㅋ\n(대애박 ~ 사건? 이렇게 하는 거 맞나?ㅋㅋㅋㅋ)\n\n처음 시작하고 1,2주가 여유로운 기간이라고 하셨는데 미션도 해야하고 할일이 많다ㅋㅋ\n3주차부터 몇배는 더 힘들어지고 어려워진다는데 큰일이다 진짜ㅋㅋ\n그래도 어제의 나와 비교해보았을 때 매일매일이 성장함을 느끼고 있어서 만족한다.\n이번 주말을 알차게 보내야 겠다.\n"},{"excerpt":"1.Stream 이란? 스트림이란 순차 또는 병렬 집계 작업을 지원하는 데이터의 흐름이자 반복자 이다.\n(A sequence of elements supporting sequential and parallel aggregate operations.)\n이러한 개념을 토대로 나온 StreamAPI는 java에서도 함수형프로그래밍을 가능하도록 하기위해 나온 오…","fields":{"slug":"/stream/"},"frontmatter":{"date":"October 21, 2022","title":"Stream","tags":["java"]},"rawMarkdownBody":"\n## 1.Stream 이란?\n\n스트림이란 순차 또는 병렬 집계 작업을 지원하는 데이터의 흐름이자 반복자 이다.\n(A sequence of elements supporting sequential and parallel aggregate operations.)\n이러한 개념을 토대로 나온 StreamAPI는 java에서도 함수형프로그래밍을 가능하도록 하기위해 나온 오퍼레이션들의 모임이라고\n할 수 있다.\n\n## 2. 특징\n\n그렇다면 스트림의 특징은 무엇이 있을까?\n\n### 스트림은 원본 데이터를 변경하지 않는다.\n\n원본의 데이터를 조회하여 원본의 데이터가 아닌 별도의 요소들로 Stream을 생성한다.\n그렇기 때문에 원본의 데이터로부터 읽기만 할 뿐,정렬이나 필터링 등의 작업은 별도의 Stream 요소들에서 처리가 된다.\n\n### 내부 반복으로 작업을 처리한다.\n\nfor이나 while문과는 다르게 반복문법을 메소드 내부에 숨기고 있어 코드가 간결해진다.\n\n### 스트림으로 처리하는 데이터는 오직 한번만 처리한다.(일회성)\n\nInterator와 같이 처리하고 지나가는 것이기에 재사용이 불가능하다.\n그렇기 때문에 다시 사용하려면 다시 stream을 생성하여야한다.\n\n### 중개 오퍼레이션은 Lazy Evolution.\n\nLazy Evoution이란 실제로 필요해지는 경우에 연산을 시작하는 것인데 Stream의 중개 오퍼레이션이 이에 해당한다.\n\n아래는 그 예시이다.\n\n```java\n        List<String> names = new ArrayList<>();\n        names.add(\"a\");\n        names.add(\"bb\");\n        names.add(\"ccc\");\n        names.add(\"dddd\");\n        names.add(\"eeeee\");\n        names.add(\"ffffff\");\n\n        Integer[] result = names.stream()\n                .map(s -> {\n                    System.out.println(s);\n                    return s.length();\n                })\n                .filter(i -> {\n                    System.out.println(\"filter!\");\n                    return (i % 2) == 0;\n                })\n                .limit(2)\n                .toArray(Integer[]::new);\n\n```\n\n```\na\nfilter!\nbb\nfilter!\nccc\nfilter!\ndddd\nfilter!\n```\n\n위의 코드 결과 처럼 lazy하게 하나씩 실행되며 조건에 만족한다면 뒤의 나머지 값들은 실행되지 않는다.\n또 다른 에시를 보자.\n\n```java\nList<String> names = new ArrayList<>();\nnames.add(\"aaa\");\nnames.add(\"bbb\");\nnames.add(\"ccc\");\nnames.add(\"ddd\");\n\nnames.stream().map(s -> {\n    System.out.println(\"s\");\n    return s.toUpperCase();\n})\n```\n\n해당 코드의 print는 실행되지 않는다.\n왜냐하면 위에서 언급한 것과 같이 중개오퍼레이션은 종료오퍼레이션을 만나야 실행되기때문이다.\n우리는 이러한 구조를 스트림 파이프라인이라고 부른다.\n\n## 3. 스트림 파이프라인\n\n파이프라인이란 컴퓨터 과학에서 한 데이터 처리 단계의 출력이 다음 단계의 입력으로 이어지는 형태로 연결된 구조를 말한다.\n스트림은 중개오퍼레이션과 종료오퍼레이션을 가지고 이러한 파이프라인을 형성한다.\n여기서 스트림파이프 라인의 특징은 종료오퍼레이션이 시작되기 전까지 중개오퍼레이션은 지연(lazy)된다는 것이다.\n종료오퍼레이션이 시작하면 비로소 컬렉션에서 요소가 하나씩 중개오퍼레이션에서 처리되고 종료오퍼레이션까지 오게 된다.\n\n- 0 또는 다수의 중개 오퍼레이션 (intermediate operation)과 한개의 종료 오퍼레이션 (terminal operation)으로 구성한다.\n- 스트림의 데이터 소스는 오직 터미널 오퍼네이션을 실행할 때에만 처리한다.\n\n### 중개 오퍼레이션\n\n- Stream을 리턴한다.\n- Stateless / Stateful 오퍼레이션으로 더 상세하게 구분할 수도 있다.\n  (대부분은 Stateless지만,distinct나 sorted처럼 이전 이전 소스 데이터를 참조해야 하는 경우는Stateful 오퍼레이션.)\n- filter, map, limit, skip, sorted, ...\n\n### 종료 오퍼레이션\n\n- Stream을 리턴하지 않는다.\n- collect, allMatch, count, forEach, min, max, ...\n\n### 참고\n\n- https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html\n\n- https://mangkyu.tistory.com/112\n"},{"excerpt":"1. 포스트 추가하기  경로에 새로운 마크다운 파일을 생성하여 여러분의 글을 추가할 수 있습니다. 1-1. 포스트 파일 구조 새로운 문서를 추가하는 방법에는 두가지가 있습니다. 첫번째는 디렉토리 없이 문서를 생성하는 방법입니다. 만약 여러분이 Javascript 에 관한 문서를 생성한다면,  파일을  디렉토리에 추가할 수 있습니다. 두번째 방법은 먼저 디…","fields":{"slug":"/writing-guide-kr/"},"frontmatter":{"date":"April 03, 2021","title":"작성 가이드","tags":["writing-guide"]},"rawMarkdownBody":"\n## 1. 포스트 추가하기\n\n`contents/post` 경로에 새로운 마크다운 파일을 생성하여 여러분의 글을 추가할 수 있습니다.\n\n### 1-1. 포스트 파일 구조\n\n새로운 문서를 추가하는 방법에는 두가지가 있습니다. 첫번째는 디렉토리 없이 문서를 생성하는 방법입니다. 만약 여러분이 Javascript 에 관한 문서를 생성한다면, `about-javascript.md` 파일을 `contents/posts` 디렉토리에 추가할 수 있습니다.\n\n두번째 방법은 먼저 디렉토리를 생성한 뒤, 디렉토리 안에 `index.md` 파일을 추가하는 것 입니다. 이 방법은 문서 내에 여러 이미지 파일 등 부수적인 파일 여러개가 포함되었을 때 유용합니다.\n\n첫번째 방법으로 생성한 파일명이나, 두번째 방법으로 생성한 디렉토리 이름은 웹사이트에서 고유의 주소를 갖습니다. `https://siteURL/about-javascript` 와 같이요.\n\n### 1-2. Frontmatter\n\n마크다운은 문서의 메타데이터인 Frontmatter 라 불리는 정보를 가지고 있습니다.\n\n```\n---\ntitle: \"🤔 3. 작성 가이드\"\ndescription: \"어떻게 글을 작성하고 추가할까요?\"\ndate: 2021-04-03\nupdate: 2021-04-03\ntags:\n  - hoodie\n  - writing-guide\nseries: \"gatsby-starter-hoodie 로 블로그 시작하기\"\n---\n```\n\n위는 지금 여러분이 읽고 있는 문서의 Frontmatter 입니다. `title` 과 `date` 는 필수 값입니다. 띄어쓰기를 포함된 문자열을 입력할 때에는 따옴표로 감싸는 것을 추천합니다.\n\n### 1-3. 마크다운 작성하기\n\n만약 Frontmatter 까지 작성했다면, 여러분은 그 아래에 마크다운 문서를 작성하면 됩니다. gatsby-starter-hoodie 는 대부분의 마크다운 문법을 지원합니다. 마크다운 작성 방법을 알고 싶다면, Github 의 [Mastering Markdown](https://guides.github.com/features/mastering-markdown/) 문서를 참고하세요.\n\n## 2. 코드 하이라이팅 & Katex\n\n### 2-1. 코드 하이라이팅\n\nPrism.JS 에 기반한 코드 하이라이팅이 제공됩니다.\n\n#### 예시\n\nJavascript\n\n```javascript\nconsole.log(\"Hello, world!\")\n```\n\nPython\n\n```python\nprint(\"Hello, world!\")\n```\n\n그 외 더 많은 언어를 제공합니다. 제공되는 언어를 확인하고 싶다면, [Prism.js 웹사이트](https://prismjs.com/) 를 참고하세요.\n\n### 2-2. Katex\n\nKatex 문법을 지원하여 복잡한 수식도 쉽게 표현할 수 있습니다.\n\n#### 인라인 모드\n\n$$E = m c^{2}$$\n\n#### 블럭 모드\n\n$$\n\\int_{0}^{\\infty} f(x) dx\n$$\n\n## 3. 글에 이미지 추가하기\n\n상대경로를 이용하여 쉽게 이미지를 추가할 수 있습니다. 디렉토리를 생성하고 그 안에 `index.md` 를 추가하여, 글을 추가하는 방법으로 작성해야 이미지 관리가 쉽습니다.\n\n![샘플 이미지 캡션](sample-image.jpg)\n\n이미지는 Lazy Loading 으로 로드되어, 빠른 초기 문서 로딩 속도를 확보할 수 있습니다.\n\n> ⚠ 이미지의 모든 확장자는 소문자여야합니다.\n\n## 4. 태그\n\n![](tag-example.jpg)\n\nFrontmatter 의 태그를 통해 쉽게 문서를 분류하고 검색할 수 있습니다. 여러분의 모든 태그는 `https://siteUrl/tags` 경로에서 확인하고, 검색할 수 있습니다.\n\n## 5. 시리즈\n\n![](series-example.jpg)\n\n여러분이 연관된 여러개의 문서를 작성할 때 시리즈를 사용할 수 있습니다. Frontmatter 에 작성된 시리즈가 같은 문서끼리 묶여 문서 상단에 리스트로 표시됩니다. 시리즈는 일련의 순서가 있는 문서들을 작성할 때 유용하게 사용할 수 있습니다. 시리즈는 문서의 작성 날짜 순서대로 정렬됩니다.\n\n현재 문서는 `gatsby-starter-hoodie 로 블로그 시작하기` 라는 시리즈로 설정되어 있습니다.\n"}]}},"pageContext":{}},"staticQueryHashes":[]}